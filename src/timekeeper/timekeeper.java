/*
 * timekeeper.java
 *
 * Created on 27 juni 2007, 13:09
 */

package timekeeper;


import java.awt.Rectangle;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.PatternSyntaxException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.*;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author  BE02927
 */
public class timekeeper extends javax.swing.JFrame {

    
    /** Creates new form timekeeper */
    public timekeeper() {
        int response;
        initComponents();
        load_ini_setting();
        load_customers();
        jComboBox1.setSelectedIndex(0);
        start_datetime();
        load_file();

        jTable1.doLayout();
        jTable1.repaint();
        response = JOptionPane.showConfirmDialog(null, "Load data from backup file?"); 
        if (response == 0) {
        load_last_settings();
        }
        jTextField10.setText("Press Start button to start timing" );
        resize_columns();
        r = jTable1.getCellRect(jTable1.getRowCount()-1, 0, true);
        jTable1.scrollRectToVisible(r);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        jLabel2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jToggleButton1 = new javax.swing.JToggleButton();
        jTextField13 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Timekeeper");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Settings"));

        jButton1.setText("Output File");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                browse_timekeeper(evt);
            }
        });

        jButton2.setText("Customers File");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                browse_customers(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jButton2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jTextField2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton2))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Timekeeper Entry Frame"));

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                select_cust(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Johnson Controls");
        jLabel1.setOpaque(true);

        jLabel2.setText("Call Nbr");

        jLabel3.setText("Description");

        jButton3.setText("Start");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                start(evt);
            }
        });

        jButton4.setText("End");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                end_timing(evt);
            }
        });

        jLabel4.setText("Time");

        jLabel5.setText("Time to book");

        jButton6.setText("Add record");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                write_record(evt);
            }
        });

        jButton7.setText("Help");

        jButton8.setText("Save settings");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                save_settings(evt);
            }
        });

        jButton9.setText("Exit");
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Stop_all(evt);
            }
        });

        jTextField8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField8.setForeground(new java.awt.Color(0, 0, 153));
        jTextField8.setFocusable(false);

        jTextField9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField9.setForeground(new java.awt.Color(0, 0, 153));
        jTextField9.setFocusable(false);

        jLabel6.setText("Current Date & Time");

        jLabel7.setText("Status ");
        jLabel7.setFocusable(false);

        jTextField10.setBackground(new java.awt.Color(204, 204, 204));
        jTextField10.setFocusable(false);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Rounding"));

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Hours");
        jRadioButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Minutes");
        jRadioButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("1/2 Hours");
        jRadioButton3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButton3.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jRadioButton1)
                    .add(jRadioButton3)
                    .add(jRadioButton2))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(jRadioButton1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jRadioButton3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jRadioButton2)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(14, 14, 14)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton9))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jCalendar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(13, 13, 13)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel3)
                                    .add(jLabel2))
                                .add(8, 8, 8))
                            .add(jLabel7))
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jButton3)
                                    .add(jPanel2Layout.createSequentialGroup()
                                        .add(48, 48, 48)
                                        .add(jLabel4))
                                    .add(jTextField5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 68, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jTextField6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 68, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jButton6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jLabel5)
                                    .add(jTextField7))
                                .add(16, 16, 16)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jButton7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jButton8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 97, Short.MAX_VALUE)
                                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jTextField4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 201, Short.MAX_VALUE)
                                .add(jLabel6)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jTextField8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jTextField9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextField10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton9)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6)
                    .add(jTextField9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTextField8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 33, Short.MAX_VALUE)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(jLabel5))
                        .add(14, 14, 14)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jTextField7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jButton7))
                            .add(jTextField5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jTextField6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(10, 10, 10)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jButton4)
                                .add(jButton6)
                                .add(jButton8))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jButton3))
                        .add(15, 15, 15))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextField10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7))
                .addContainerGap())
            .add(jPanel2Layout.createSequentialGroup()
                .add(28, 28, 28)
                .add(jCalendar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(21, 21, 21))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Data"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "Customer", "Call", "Hours", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jTable1.setAutoscrolls(false);
        jTable1.setCellSelectionEnabled(true);
        jTable1.setDragEnabled(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                copy_to_filter(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jToggleButton1.setText("Not Filtered");
        jToggleButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filter(evt);
            }
        });

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("Vic Mertens");

        jButton5.setText("Save changes");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                save_changes(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jToggleButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 143, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextField13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 444, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(14, 14, 14)
                .add(jButton5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jToggleButton1)
                    .add(jTextField13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 25, Short.MAX_VALUE)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 233, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel9))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void save_changes(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_save_changes

        jTextField13.setText("");
        if (jButton5.isEnabled()) {
	File f_cnt = new File (jTextField1.getText());
        try {
						FileOutputStream fct1 = new FileOutputStream (f_cnt);
                                                OutputStream bfct1 = new BufferedOutputStream(fct1);
                                                OutputStreamWriter out = new OutputStreamWriter(bfct1, "8859_1");
        // hier tekst string samenstellen
                                                tekst = "";
        for (int i=0;i<jTable1.getRowCount();i=i+1) {
             for (int j=0;j<5;j=j+1)
              {
                 if (jTable1.getValueAt(i,j) != null) {
                 tekst = tekst + jTable1.getValueAt(i,j).toString()  ;
                    if (j < 4) {
                      tekst = tekst + ";" ;
                    }
                 } else {
                    if (j < 4) {
                      tekst = tekst + " ;" ;
                    }
                 }
                 if (j == 4)  {
                 // if (i + 1 != jTable1.getRowCount()) {
                     tekst = tekst + "\n" ;
                 // }
                 }
               }
        }                       
        
                                                out.write (tekst);
						out.close ();
					} catch (IOException exc) {
					}
        load_file();
        jTable1.doLayout();
        jTable1.repaint();
        resize_columns();
        jTextField10.setText("Changes written to csv file" );
        } else {
        jTextField10.setText("Saving disabled because data is filtered" );
        }
    }//GEN-LAST:event_save_changes

    private void filter(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filter
        filtered = !filtered;
        if (filtered) {
           jToggleButton1.setText("Filtered");
           jButton5.setEnabled(false);
        }  else {
           jToggleButton1.setText("Not Filtered");
           jButton5.setEnabled(true);
           jTextField13.setText("");
        }
        
        load_file();
        jTable1.doLayout();
        jTable1.repaint();
        resize_columns();

        
    }//GEN-LAST:event_filter

    private void write_record(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_write_record
        File f_cnt = new File (jTextField1.getText());
        Double time_ = null;
        String time_to_book = null;
        String unit;
        int diff;
        int diff_sec;
        int start_sec;
        int end_sec;
        jTextField13.setText("");                   //20091030
        jTextField6.setText(jTextField9.getText());
         //calculate time elapsed
         end_sec = Integer.parseInt(jTextField6.getText().substring(0,2)) * 3600 +
                   Integer.parseInt(jTextField6.getText().substring(3,5)) * 60 +
                   Integer.parseInt(jTextField6.getText().substring(6,8)) ;
         start_sec = Integer.parseInt(jTextField5.getText().substring(0,2)) * 3600 +
                   Integer.parseInt(jTextField5.getText().substring(3,5)) * 60 +
                   Integer.parseInt(jTextField5.getText().substring(6,8)) ;
         
         diff_sec = end_sec - start_sec;
         if (jRadioButton1.isSelected()) {
             time_ = (diff_sec + 0.0) / 3600;
             time_ = round(time_,0);
         } 
         if (jRadioButton2.isSelected()) {
             time_ = (diff_sec + 0.0) / 3600;
             time_ = round(time_,2);
         }
         if (jRadioButton3.isSelected()) {
             time_ = (diff_sec + 0.0) / 3600 ;
             time_ =  0.5 * Math.round(time_/0.5);

         }
         time_to_book = "" + time_;
        String record = String.format("%1$td/%1$tm/%1$tY", jCalendar1.getDate()) + ";" + (String) jComboBox1.getSelectedItem() + ";" + jTextField3.getText() + ";" + time_to_book + ";" + jTextField4.getText() + "\n" ;
        append = true;
        try {
						FileOutputStream fct1 = new FileOutputStream (f_cnt, append);
                                                OutputStream bfct1 = new BufferedOutputStream(fct1);
                                                OutputStreamWriter out = new OutputStreamWriter(bfct1, "8859_1");
						out.write (record);
						out.close ();
					} catch (IOException exc) {
					}
                                        
        jTextField10.setText("Added record: " + record );
        load_file();
        jTable1.doLayout();
        jTable1.repaint();
        resize_columns();
        r = jTable1.getCellRect(jTable1.getRowCount()-1, 0, true);
        jTable1.scrollRectToVisible(r);
        
        
    }//GEN-LAST:event_write_record
    
    private void resize_columns() {
    
    int vColIndex = 0;
    TableColumn col = jTable1.getColumnModel().getColumn(vColIndex);
    int width = 75;
    col.setPreferredWidth(width);
    
    vColIndex = 1;
    col = jTable1.getColumnModel().getColumn(vColIndex);
    width = 80;
    col.setPreferredWidth(width);
    
    vColIndex = 2;
    col = jTable1.getColumnModel().getColumn(vColIndex);
    width = 75;
    col.setPreferredWidth(width);
    
    vColIndex = 3;
    col = jTable1.getColumnModel().getColumn(vColIndex);
    width = 60;
    col.setPreferredWidth(width);
    
    vColIndex = 4;
    col = jTable1.getColumnModel().getColumn(vColIndex);
    width = 450;
    col.setPreferredWidth(width);

    }
    
    public static double round(double val, int places) {
	long factor = (long)Math.pow(10,places);

	// Shift the decimal the correct number of places
	// to the right.
	val = val * factor;

	// Round to the nearest integer.
	long tmp = Math.round(val);

	// Shift the decimal the correct number of places
	// back to the left.
	return (double)tmp / factor;
    }

    /**
     * Round a float value to a specified number of decimal 
     * places.
     *
     * @param val the value to be rounded.
     * @param places the number of decimal places to round to.
     * @return val rounded to places decimal places.
     */
    public static float round(float val, int places) {
	return (float)round((double)val, places);
    }



    private void end_timing(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_end_timing
        String unit;
        double diff;
        int diff_sec;
        int start_sec;
         int end_sec;
         jTextField6.setText(jTextField9.getText());
         //calculate time elapsed
         end_sec = Integer.parseInt(jTextField6.getText().substring(0,2)) * 3600 +
                   Integer.parseInt(jTextField6.getText().substring(3,5)) * 60 +
                   Integer.parseInt(jTextField6.getText().substring(6,8)) ;
         start_sec = Integer.parseInt(jTextField5.getText().substring(0,2)) * 3600 +
                   Integer.parseInt(jTextField5.getText().substring(3,5)) * 60 +
                   Integer.parseInt(jTextField5.getText().substring(6,8)) ;
         
         diff_sec = end_sec - start_sec;

         int MINUTES_PER_HOUR = 60;
         int SECONDS_PER_MINUTE = 60;
         int HOURS_PER_DAY = 24;

          /* value to break down into hours, minutes, seconds */
          long togo = diff_sec; /* milliseconds */

          int seconds = (int)( togo % SECONDS_PER_MINUTE );
          togo /= SECONDS_PER_MINUTE;

          int minutes = (int)( togo % MINUTES_PER_HOUR );
          togo /= MINUTES_PER_HOUR;

          int hours = (int) togo ;
          
          //System.out.println("" + hours + " " + minutes + " " + seconds);
          jTextField7.setText("" + hours + ":" + minutes + ":" + seconds );
          jTextField10.setText("Press Add record button to save to file");
        
    }//GEN-LAST:event_end_timing

    private void start(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_start
      jTextField5.setText(jTextField9.getText());
      jTextField6.setText("");
      jTextField7.setText("");
      jTextField10.setText("Press End button when finished");

    }//GEN-LAST:event_start

    private void select_cust(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_select_cust

        String selName = (String)jComboBox1.getSelectedItem();
        selNum = jComboBox1.getSelectedIndex();
        if (selNum > -1) {
            try {
                // System.out.println(selNum);
                jLabel1.setText(custnames[selNum]);
            } finally {
            }
        }

    }//GEN-LAST:event_select_cust

    private void browse_customers(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_browse_customers
          JFileChooser fc2 = new JFileChooser() ;
          fc2.showOpenDialog(this);
        try {
            fileName = fc2.getSelectedFile().getAbsolutePath();
            fileNaam = (String) fileName;
            jTextField2.setText(fileNaam);
        } finally {
        }
    }//GEN-LAST:event_browse_customers

    private void browse_timekeeper(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_browse_timekeeper
          JFileChooser fc1 = new JFileChooser() ;
          fc1.showOpenDialog(this);
        try {
            fileName = fc1.getSelectedFile().getAbsolutePath();
            fileNaam = (String) fileName;
            jTextField1.setText(fileNaam);
        } finally {
        }
    }//GEN-LAST:event_browse_timekeeper

    private void save_settings(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_save_settings
        File f_ini = new File ("timekeeper.ini");
        Properties p = new Properties();
        p.setProperty("CSVFILE",jTextField1.getText());
        p.setProperty("CUSTFILE",jTextField2.getText());
        
        FileOutputStream out = null;
        try {
            out = new FileOutputStream(f_ini);
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        try {
          p.store(out, "---Timekeeper settings---");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        try {
            out.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        jTextField10.setText("Settings written to ini file");

    }//GEN-LAST:event_save_settings

    private void Stop_all(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Stop_all
     stopit = true;
        jTextField10.setText("Quitting,....");
        while (DateTime1.isAlive()) {
            stopit=true;
         }
     
         save_current_settings();
         System.exit(0);
        
    }//GEN-LAST:event_Stop_all

    private void copy_to_filter(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copy_to_filter
        jTextField13.setText("" + jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getSelectedColumn()));
    }//GEN-LAST:event_copy_to_filter
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                   

            try { UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel" );
            } catch (IllegalAccessException ex) {
                ex.printStackTrace();
            } catch (InstantiationException ex) {
                ex.printStackTrace();
            } catch (UnsupportedLookAndFeelException ex) {
                ex.printStackTrace();
            } catch (ClassNotFoundException ex) {
                ex.printStackTrace();
            }
                
                new timekeeper().setVisible(true);
            }
        });
    }

    
    class DateTime extends Thread {

	public int count = 1;

        private Date date;

	public void run() {
          while (!stopit) 
          { 
               // Construct the current date. 
               Calendar now = Calendar.getInstance();
               date = new Date(); 
               // Get the hours, minutes and hours
               String date = Calendar.getInstance().get(Calendar.DAY_OF_MONTH ) + "-" + Calendar.getInstance().get(Calendar.MONTH) + "-" + Calendar.getInstance().get(Calendar.YEAR);
               // Put that result in the textfield 
               jTextField9.setText(String.format("%1$tH:%1$tM:%1$tS", now));
               jTextField8.setText(String.format("%1$td/%1$tm/%1$tY", now));
            
                // jTextField8.setText(date);
               //Now the reason for threads 
               try 
               { 
                     // Wait 500milliseconds before continuing 
                    DateTime.sleep(500); 
               } 
               catch (InterruptedException e) 
               { 
                    System.out.println(e); 
                } 
               // he has wait and will now restart his actions. 
          } 
        
        }
}

        private void start_datetime() {
        stopit=false;
       
        if (!DateTime1.isAlive())
			DateTime1.start();
    }

    private void save_current_settings() {
        File f_ini = new File ("timekeeper.bak");
        Properties p = new Properties();
        p.setProperty("jTextField3",jTextField3.getText());
        p.setProperty("jTextField4",jTextField4.getText());
        p.setProperty("jTextField5",jTextField5.getText());
        p.setProperty("jTextField6",jTextField6.getText());
        p.setProperty("jTextField7",jTextField7.getText());
        p.setProperty("jTextField10",jTextField10.getText());
        p.setProperty("jComboBox1","" + jComboBox1.getSelectedIndex());
        
        FileOutputStream out = null;
        try {
            out = new FileOutputStream(f_ini);
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        try {
          p.store(out, "---Timekeeper last data---");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        try {
            out.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }

    private void load_customers() {
       readafile(jTextField2.getText());        
    }

     private void readafile(String bestand) { 
        BufferedReader dis = null;
        // DataInputStream dis = null; 
        String record = null; 
        int recCount = 0; 

        try { 

           File f = new File(bestand); 
           FileInputStream fis = new FileInputStream(f); 
           BufferedInputStream bis = new BufferedInputStream(fis); 
           dis = new BufferedReader(new InputStreamReader(bis));
           // dis = new DataInputStream(bis);  

           while ( (record= dis.readLine()) != null ) { 
              recCount++;
                try {
                    mySplitResult = record.split(";");
                    String custnum = mySplitResult[0];
                    custname = "";
                    for (int i = 1; i < mySplitResult.length ; i++) {
                       if (i == 1) {
                        custname = mySplitResult[i];
                       } else {
                        custname = custname + ", " + mySplitResult[i];
                       }
                    }
                    jComboBox1.addItem(custnum);
                    ii = jComboBox1.getItemCount();
                    custnames[ii - 1] = custname;      
                    // System.out.println("" + recCount + " " + custnum + "  ,  " + custname); 
                } finally {
                }
              
              
           } 

        } catch (IOException e) { 
           // catch io errors from FileInputStream or readLine() 
           System.out.println("IOException error!" + e.getMessage()); 

        } finally { 
           // if the file opened okay, make sure we close it 
           if (dis != null) { 
	      try {
                 dis.close(); 
	      } catch (IOException ioe) {
	      }
           } 
        } 
     } 
    
    private void load_ini_setting() {
        File f_ini = new File ("timekeeper.ini");
        FileInputStream fini = null;
        try {
            fini = new FileInputStream(f_ini);
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
              Properties p = new Properties();
        try {
            p.load(fini);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        try {
            fini.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        jTextField1.setText(p.getProperty("CSVFILE"));
        jTextField2.setText(p.getProperty("CUSTFILE"));

    }

    private void load_last_settings() {
        File f_ini = new File ("timekeeper.bak");
        FileInputStream fini = null;
        try {
            fini = new FileInputStream(f_ini);
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
              Properties p = new Properties();
        try {
            p.load(fini);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        try {
            fini.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        jTextField3.setText(p.getProperty("jTextField3"));
        jTextField4.setText(p.getProperty("jTextField4"));
        jTextField5.setText(p.getProperty("jTextField5"));
        jTextField6.setText(p.getProperty("jTextField6"));
        jTextField7.setText(p.getProperty("jTextField7"));
        jTextField10.setText(p.getProperty("jTextField10"));
        jComboBox1.setSelectedIndex(Integer.parseInt(p.getProperty("jComboBox1")));

    }

    public void highlightLastRow(int row) {
     int lastrow = tableModel.getRowCount();
     if (row == lastrow - 1) {
         jTable1.setRowSelectionInterval(lastrow - 1, lastrow - 1);
     } else {
         jTable1.setRowSelectionInterval(row + 1, row + 1);
     }

     jTable1.setColumnSelectionInterval(0, 0);
 }


private void newFilter(TableRowSorter thesorter) {
    RowFilter<TableModel, Object> rf = null;
    //If current expression doesn't parse, don't update.
    String text = jTextField13.getText();
    if (text.length() == 0) {
                 thesorter.setRowFilter(null);
               } else {
                 try {
                   thesorter.setRowFilter(
                       RowFilter.regexFilter(text));
                 } catch (PatternSyntaxException pse) {
                   System.err.println("Bad regex pattern");
                 }
               }
     thesorter.setRowFilter(RowFilter.regexFilter(jTextField13.getText()));
   
                 
}

    
    private void load_file() {
        double hours_to_add = 0;
        total_hours = 0.0 ;
     try{
      BufferedReader reader = new BufferedReader(new FileReader(jTextField1.getText()));
      tableModel = new DefaultTableModel(null, columnNamen);
      jTable1.setModel(tableModel);
      TableRowSorter sorter = new TableRowSorter(tableModel);
      jTable1.setRowSorter(sorter);
      String strLine;
            try {
                while ( (strLine = reader.readLine()) != null )
                {
                  String[] items = strLine.split(";");
                   // System.out.println(items[1].equals(jTextField13.getText()));
                   // if ((filtered && (items[1].equals(jTextField13.getText()))) || !filtered)  {
                    tableModel.addRow(items);
                    hours_to_add = Double.parseDouble(items[3]);
                    // total_hours = total_hours + hours_to_add;
                    // System.out.println("" + items[3] + " " + hours_to_add);
                   // }
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
      newFilter(sorter);
      tableModel.fireTableDataChanged();
      
    }
    catch(FileNotFoundException e) {}
    catch(IOException e) {}

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

    private boolean stopit;
    DateTime DateTime1 = new DateTime();

    private String fileNaam;

    private String fileName;

    private String[] mySplitResult;

    private String[] custnames = new String[500];

    private int selNum;

    private String custname;

    private int ii;

    private boolean append;

    private DefaultTableModel tableModel;

    private String[] columnNamen = { "Date", "Customer", "Call", "Hours", "Description" };
    private Double total_hours = 0.0 ;
    
    private boolean filtered;

    private String tekst;
    private Rectangle r;
}
